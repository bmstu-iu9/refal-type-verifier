
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 20 14:29:36 MSK 2018
//----------------------------------------------------

package VerificatorInterpritator;

import VerificatorInterpritator.Tokens.LexerToken;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 20 14:29:36 MSK 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\006\000\002\005\003" +
    "\000\002\005\004\000\002\013\003\000\002\014\004\000" +
    "\002\014\005\000\002\007\003\000\002\007\003\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\005\000\002\011\006" +
    "\000\002\011\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\004\010\000\002\006\003\000\002\006\002\000\002\012" +
    "\004\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\002\ufffe\007\006\015\010\001\002\000" +
    "\004\002\056\001\002\000\010\002\ufffe\007\006\015\010" +
    "\001\002\000\004\006\044\001\002\000\010\002\ufffe\007" +
    "\006\015\010\001\002\000\004\013\011\001\002\000\016" +
    "\004\023\006\024\015\017\016\015\021\014\022\025\001" +
    "\002\000\014\005\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\001\002\000\006\011\ufffa\012\ufffa\001\002\000\034\004" +
    "\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\001" +
    "\002\000\034\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec" +
    "\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\001\002\000\006\011\ufffc\012\037\001\002" +
    "\000\034\004\uffed\005\uffed\006\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\001\002\000\034\004\023\005\ufff2\006\024\010" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\015\017\016\015\017\ufff2" +
    "\020\ufff2\021\014\022\025\001\002\000\004\011\035\001" +
    "\002\000\020\005\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\017\032\020\033\001\002\000\016\004\023\006\024\015" +
    "\017\016\015\021\014\022\025\001\002\000\034\004\uffeb" +
    "\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\001\002" +
    "\000\034\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\001\002\000\004\005\027\001\002\000\020\005" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\017\ufff0\020\ufff0" +
    "\001\002\000\020\005\uffef\010\uffef\011\uffef\012\uffef\014" +
    "\uffef\017\uffef\020\uffef\001\002\000\020\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\017\uffee\020\uffee\001\002\000" +
    "\030\004\023\005\ufff4\006\024\010\ufff4\011\ufff4\012\ufff4" +
    "\014\ufff4\015\017\016\015\021\014\022\025\001\002\000" +
    "\014\005\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\001\002" +
    "\000\014\005\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\001" +
    "\002\000\010\002\ufffd\007\ufffd\015\ufffd\001\002\000\020" +
    "\005\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\017\ufff1\020" +
    "\ufff1\001\002\000\016\004\023\006\024\015\017\016\015" +
    "\021\014\022\025\001\002\000\004\011\ufffb\001\002\000" +
    "\006\011\ufff9\012\037\001\002\000\004\011\ufff8\001\002" +
    "\000\004\002\000\001\002\000\020\004\023\006\024\010" +
    "\uffe6\015\017\016\015\021\014\022\025\001\002\000\004" +
    "\010\uffe7\001\002\000\004\010\047\001\002\000\004\014" +
    "\051\001\002\000\004\011\054\001\002\000\020\004\023" +
    "\006\024\011\uffe3\015\017\016\015\021\014\022\025\001" +
    "\002\000\006\011\uffe5\014\051\001\002\000\004\011\uffe4" +
    "\001\002\000\010\002\uffe8\007\uffe8\015\uffe8\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\010\002\054\003\006\004\004\001\001" +
    "\000\002\001\001\000\010\002\042\003\006\004\004\001" +
    "\001\000\002\001\001\000\016\005\020\007\012\010\011" +
    "\011\021\013\015\015\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\037\001\001\000\002\001\001\000\006\011\035\015" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\025\010\011\011\021\015\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\033\015" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\040\010\011\011" +
    "\021\015\017\001\001\000\002\001\001\000\004\014\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\045\007\044\010\011\011\021\015\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\047\001\001\000" +
    "\002\001\001\000\012\007\051\010\011\011\021\015\017" +
    "\001\001\000\004\012\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append( "("+info.toString()+")" );

    m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // res ::= EQUAL 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // res ::= EQUAL simple_type res 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // res ::= EQUAL simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args_type ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args_type ::= simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func ::= LCHEVRON NAME args_type RCHEVRON res SEMICOLON 
            {
              Node RESULT =null;
		RESULT = new Node("FUNC", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // end_type ::= QUOTEDSTRING 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // end_type ::= INTEGER_LITERAL 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // end_type ::= NAME 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // end_type ::= METAVARIABLE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // end_type ::= VARIABLE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term_type ::= LPAREN simple_type RPAREN ATLEAST 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_type ::= LPAREN simple_type RPAREN MANY 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_type ::= LPAREN simple_type RPAREN 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_type ::= end_type term_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term_type ::= end_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stretch_type ::= term_type ATLEAST 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stretch_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stretch_type ::= term_type MANY 
            {
              Node RESULT =null;
		RESULT = new Node("MANY", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stretch_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stretch_type ::= term_type MANY term_type 
            {
              Node RESULT =null;
		RESULT = new Node("MANY", -1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stretch_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_type ::= stretch_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_type ::= term_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // n_simple_type ::= OR simple_type n_simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_simple_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // n_simple_type ::= OR simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_simple_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // f_simple_type ::= simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_simple_type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_types ::= f_simple_type n_simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_types",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simple_types ::= f_simple_type 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_types",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_def ::= VARIABLE VAREQUAL simple_types SEMICOLON 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Node(st.name, st.start);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= func spec 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= type_def spec 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

