
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package RefalInterpritator;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\004\000\002\017\005\000\002\017\004\000" +
    "\002\020\005\000\002\021\007\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\014\003\000\002\002\003" +
    "\000\002\002\004\000\002\015\003\000\002\015\004\000" +
    "\002\006\004\000\002\007\003\000\002\007\005\000\002" +
    "\013\006\000\002\013\007\000\002\012\003\000\002\012" +
    "\004\000\002\022\004\000\002\022\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\005\000\002\005\006\000\002\005\007\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\010\006\006\007\010\015\011\001\002\000" +
    "\006\002\125\006\006\001\002\000\014\002\uffd5\004\122" +
    "\006\006\007\010\015\011\001\002\000\004\015\117\001" +
    "\002\000\004\004\112\001\002\000\004\015\106\001\002" +
    "\000\004\010\012\001\002\000\020\012\017\013\025\015" +
    "\026\020\014\021\027\022\020\023\022\001\002\000\006" +
    "\012\101\023\100\001\002\000\022\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\020\uffff\021\uffff\022\uffff\023\uffff\001\002" +
    "\000\020\012\uffe6\013\025\015\026\020\014\021\027\022" +
    "\020\023\uffe6\001\002\000\004\011\076\001\002\000\022" +
    "\004\uffdb\011\uffdb\013\046\015\047\016\044\020\043\021" +
    "\050\022\045\001\002\000\022\012\000\013\000\014\000" +
    "\015\000\020\000\021\000\022\000\023\000\001\002\000" +
    "\006\004\073\011\uffda\001\002\000\016\013\046\015\047" +
    "\016\044\020\043\021\050\022\045\001\002\000\006\012" +
    "\uffe3\023\uffe3\001\002\000\006\012\036\023\035\001\002" +
    "\000\016\013\025\014\030\015\026\020\014\021\027\022" +
    "\020\001\002\000\022\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\001\002\000\022\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\001\002\000\022\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\001\002\000\022" +
    "\012\uffef\013\025\014\uffef\015\026\020\014\021\027\022" +
    "\020\023\uffef\001\002\000\004\014\033\001\002\000\022" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\001\002\000\010\012\uffee\014\uffee\023\uffee" +
    "\001\002\000\016\013\046\015\047\016\044\020\043\021" +
    "\050\022\045\001\002\000\022\004\uffdd\011\uffdd\013\046" +
    "\015\047\016\044\020\043\021\050\022\045\001\002\000" +
    "\006\012\uffe4\023\uffe4\001\002\000\030\004\ufff1\005\ufff1" +
    "\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\001\002\000\026\004\uffed\011\uffed" +
    "\013\046\014\uffed\015\047\016\044\017\uffed\020\043\021" +
    "\050\022\045\001\002\000\030\004\ufff2\005\ufff2\011\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\001\002\000\030\004\ufff5\005\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\001\002\000\016\013\046\015\047\016\044" +
    "\020\043\021\050\022\045\001\002\000\030\004\ufff6\005" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\001\002\000\020\013\046\014" +
    "\052\015\047\016\044\020\043\021\050\022\045\001\002" +
    "\000\030\004\ufff3\005\ufff3\011\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\001\002" +
    "\000\030\004\ufff4\005\ufff4\011\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\001\002" +
    "\000\006\004\uffdf\011\uffdf\001\002\000\030\004\ufff9\005" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\001\002\000\004\014\054\001" +
    "\002\000\030\004\ufffa\005\ufffa\011\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\001" +
    "\002\000\004\017\056\001\002\000\030\004\ufff8\005\ufff8" +
    "\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\001\002\000\012\004\uffec\011\uffec" +
    "\014\uffec\017\uffec\001\002\000\004\005\ufff0\001\002\000" +
    "\006\004\uffe0\011\uffe0\001\002\000\004\005\063\001\002" +
    "\000\016\010\064\013\025\015\026\020\014\021\027\022" +
    "\020\001\002\000\020\012\017\013\025\015\026\020\014" +
    "\021\027\022\020\023\022\001\002\000\006\012\uffe8\023" +
    "\022\001\002\000\006\012\uffe7\023\uffe7\001\002\000\004" +
    "\011\070\001\002\000\006\004\ufff7\011\ufff7\001\002\000" +
    "\004\005\072\001\002\000\014\013\025\015\026\020\014" +
    "\021\027\022\020\001\002\000\022\011\uffd9\012\017\013" +
    "\025\015\026\020\014\021\027\022\020\023\022\001\002" +
    "\000\004\011\uffd8\001\002\000\006\004\uffdc\011\uffdc\001" +
    "\002\000\014\002\uffd7\004\uffd7\006\uffd7\007\uffd7\015\uffd7" +
    "\001\002\000\006\012\uffe5\023\uffe5\001\002\000\016\013" +
    "\046\015\047\016\044\020\043\021\050\022\045\001\002" +
    "\000\022\004\uffde\011\uffde\013\046\015\047\016\044\020" +
    "\043\021\050\022\045\001\002\000\006\004\uffe1\011\uffe1" +
    "\001\002\000\006\004\uffe2\011\uffe2\001\002\000\004\005" +
    "\105\001\002\000\004\010\064\001\002\000\004\010\107" +
    "\001\002\000\020\012\017\013\025\015\026\020\014\021" +
    "\027\022\020\023\022\001\002\000\004\011\111\001\002" +
    "\000\014\002\uffd6\004\uffd6\006\uffd6\007\uffd6\015\uffd6\001" +
    "\002\000\010\006\006\007\010\015\011\001\002\000\006" +
    "\002\uffd2\006\006\001\002\000\004\004\115\001\002\000" +
    "\006\002\uffd1\006\uffd1\001\002\000\004\004\uffeb\001\002" +
    "\000\006\004\uffea\023\120\001\002\000\004\015\117\001" +
    "\002\000\004\004\uffe9\001\002\000\010\006\006\007\010" +
    "\015\011\001\002\000\006\002\uffd4\006\006\001\002\000" +
    "\006\002\uffd3\006\006\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\010\004\003\005\004\006\006\001\001\000" +
    "\004\006\113\001\001\000\010\004\122\005\004\006\006" +
    "\001\001\000\004\007\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\014\010\015" +
    "\011\020\012\023\013\022\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\014\012\076\001\001" +
    "\000\002\001\001\000\012\015\074\016\040\017\041\020" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\070\016\057\017\041\020\037\001\001\000\002\001" +
    "\001\000\004\013\036\001\001\000\006\002\031\003\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\033\003\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\061\016" +
    "\057\017\041\020\037\021\060\001\001\000\012\015\050" +
    "\016\040\017\041\020\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\056\016\040\017\041\020\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\054\016\040\017\041\020\037\001\001\000\002\001\001" +
    "\000\012\015\052\016\040\017\041\020\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\064\003" +
    "\030\001\001\000\016\003\014\010\066\011\020\012\023" +
    "\013\022\022\012\001\001\000\004\013\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\064\003\030\001\001\000\016\003" +
    "\014\010\073\011\020\012\023\013\022\022\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\103\016\057\017\041\020\037" +
    "\021\102\001\001\000\012\015\101\016\040\017\041\020" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\014\010\107\011\020\012\023\013\022\022\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\112\005" +
    "\004\006\006\001\001\000\004\006\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\120\001\001\000\002\001\001\000\010" +
    "\004\123\005\004\006\006\001\001\000\004\006\113\001" +
    "\001\000\004\006\113\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append( "("+ info.toString()+")" );

    m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // term ::= VARIABLE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // term ::= QUOTEDSTRING 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term ::= INTEGER_LITERAL 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= NAME 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= LPAREN expression RPAREN 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= LPAREN RPAREN 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // paren_result_term ::= LPAREN result RPAREN 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paren_result_term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paren_result_term ::= LPAREN RPAREN 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paren_result_term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // chevron_result_term ::= LCHEVRON result RCHEVRON 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chevron_result_term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block_ending ::= arg COLON LBRACE block RBRACE 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_ending",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // right_side ::= VARIABLE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // right_side ::= QUOTEDSTRING 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // right_side ::= INTEGER_LITERAL 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // right_side ::= NAME 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // right_side ::= paren_result_term 
            {
              Node RESULT =null;
		RESULT = new Node("PARENS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // right_side ::= chevron_result_term 
            {
              Node RESULT =null;
		RESULT = new Node("CHEVRONS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("right_side",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arg ::= right_side 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= term 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= term expression 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // result ::= right_side 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // result ::= right_side result 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // external_decl ::= EXTERN f_name_list 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // f_name_list ::= NAME 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_name_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // f_name_list ::= NAME COMMA f_name_list 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_name_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conditions ::= COMMA arg COLON expression 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditions",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conditions ::= COMMA arg COLON expression conditions 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditions",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // left_side ::= term 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_side",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // left_side ::= term left_side 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_side",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lefts ::= left_side conditions 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lefts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lefts ::= conditions 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lefts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentence ::= lefts COMMA block_ending 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentence ::= lefts EQUAL result 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentence ::= left_side COMMA block_ending 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentence ::= left_side EQUAL result 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentence ::= lefts EQUAL 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentence ::= left_side EQUAL 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentence ::= EQUAL result 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentence ::= EQUAL 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block ::= sentence 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // block ::= sentence SEMICOLON 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block ::= sentence SEMICOLON block 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // f_definition ::= NAME LBRACE block RBRACE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // f_definition ::= ENTRY NAME LBRACE block RBRACE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LexerToken st = (LexerToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Node(st.name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // program ::= f_definition 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // program ::= f_definition program 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // program ::= f_definition SEMICOLON program 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // program ::= external_decl SEMICOLON program 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // program ::= program external_decl SEMICOLON 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
